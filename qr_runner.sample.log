Loading pickled vobac in 2.7546210289
copying index from /srv/local/work/sixilu2/sixilu2/github/queryreformulator/QueryReformulator/data/index/ to ./index
Folder ./index already exists! Doing nothing.
Loading Title-ID mapping...
Loading queries and docs 100.495731831
agent.initialize_model(), do nothing.
agent.reset(), do nothing.
Starting QueryReformulatorAgent for Environment 'Query Reformulator Env'
agent.reset(), do nothing.
agent.reset(), do nothing.
in agent.act(), states = 
[]
current_queries (before calling search.perform) =  [['atmospheric', 'circulation', 'of', 'exoplanets', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']]
q_i =  [[ 19988 247603 113658 369760     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2]]
q_m =  [[1.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000]]
n_iter =  0
agent.observe(), terminal = False
reward = [0.0279]
[[u'atmospheric circulation of exoplanets', u'gliese 581g as a scaled up version of earth atmospheric circulation simulations', u'thermodynamics of atmospheric circulation on hot jupiters', u'the role of drag in the energetics of strongly forced exoplanet atmospheres', u'atmospheric circulation and composition of gj1214b', u'atmospheric circulation of tidally locked exoplanets a suite of benchmark tests for dynamical solvers', u'influence of solar flares and disturbances of the interplanetary medium on the atmospheric circulation', u'geologic approach to the long term history of atmospheric circulation', u'atmospheric loss of exoplanets resulting from stellar x ray and extreme ultraviolet heating', u'atmospheric and oceanic fluid dynamics fundamentals and large scale circulation', u'the general circulation of the atmosphere', u'atmospheric circulation during warm geologic periods is the equator to pole surface temperature gradient the controlling factor', u'atmospheric circulation patterns during glacial inception a possible candidate', u'cretaceous climate a comparison of atmospheric simulations with the geologic record', u'coronal mass ejection cme activity of low mass m stars as an important factor for the habitability of terrestrial exoplanets ii cme induced ion pick up of earth like exoplanets in close in habitable zones', u'atmospheric circulation systems', u'global atmospheric circulation statistics', u'jupiter s atmospheric circulation', u'decadal oscillations of the air ice ocean system in the northern hemisphere', u'on the star magnetosphere interaction of close in exoplanets', u'atmospheric tides and the 4 day circulation on venus', u'global atmospheric circulation statistics 1000 1 mb', u'approximate methods for atmospheric and oceanographic circulation problems', u'global atmospheric circulation statistics 1958 1973', u'atmospheric circulation of hot jupiters a review of current understanding', u'a proposal for the intercomparison of the dynamical cores of atmospheric general circulation models', u'uncertainties in carbon dioxide radiative forcing in atmospheric general circulation models', u'ultra low frequency variability in a simple atmospheric circulation model', u'solar activity earth s pressure field and atmospheric circulation', u'simulation of the martian atmospheric polar warming with the lmd general circulation model', u'the cenozoic ocean circulation based on ocean general circulation model results', u'fundamentals of atmospheric physics', u'ranges of atmospheric mass and composition of super earth exoplanets', u'atmospheric circulation of tidally locked exoplanets ii dual band radiative transfer and convective adjustment', u'atmospheric science an introductory survey', u'interpretation of cloud climate feedback as produced by 14 atmospheric general circulation models', u'sensitivity of an atmospheric general circulation model to prescribed sst changes feedback effects associated with the simulation of cloud optical properties', u'atmospheric carbon dioxide and early eocene climate a general circulation modeling sensitivity study', u'a sensitivity study of changes in earth s rotation rate with an atmospheric general circulation model', u'martian atmospheric data assimilation with a simplified general circulation model orbiter and lander networks']]
current_queries (before calling search.perform) =  [['a', 'theory', 'of', 'historical', 'discovery', 'the', 'construction', 'of', 'componential', 'models
q_i =  [[318311 253088 113658  95326  54879 340991  60190 113658 229757 302521     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2]]
q_m =  [[1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000]]
n_iter =  1
agent.observe(), terminal = False
reward = [0.2000]
current_queries (before calling search.perform) =  [['use', 'of', 'activity', 'classes', 'in', 'adaptive', 'transform', 'image', 'coding
q_i =  [[348755 113658 300719  76596  92996  48344 171569 151523 346614     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2]]
q_m =  [[1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000]]
n_iter =  2
qs =  ['use of activity classes in adaptive transform image coding']
agent.observe(), terminal = False
reward = [0.0000]
in agent.act(), states = 
[[u'use of activity classes in adaptive transform image coding', u'image sequence coding using adaptive vector quantisation in wavelet transform domain', u'an adaptive transform coding algorithm', u'still picture compression algorithms evaluated for international standardisation', u'some experiments in adaptive and predictive hadamard transform coding of pictures', u'image representation using nonorthogonal basis images with adaptive weight optimization', u'transform image coding', u'performance of block cosine image coding with adaptive quantization', u'survey of adaptive image coding techniques', u'hybrid dft dpcm interframe image quantization', u'singular value decomposition svd image coding', u'optimally adaptive transform coding', u'prioritized dct for compression and progressive transmission of images', u'adaptive coding method of x ray mammograms', u'adaptive coding of monochrome and color images', u'adaptive transform coding of video signals', u'intraframe and interframe adaptive transform coding', u'adaptive transform coding of speech signals', u'anisotropic nonstationary image estimation and its applications part ii predictive image coding', u'channel rate equalization techniques for adaptive transform coders', u'interframe cosine transform image coding', u'theoretical performance models for interframe transform and hybrid transform dpcm coders', u'an image transform coding scheme based on spatial domain considerations', u'spatial transform coding of color images', u'an adaptive strategy for hybrid image coding', u'image compression through wavelet transform coding', u'coding television signals at 320 and 64 kbit s', u'combined source channel coding in adaptive transform coding systems for images', u'a contour texture approach to picture coding', u'hadamard transform image coding', u'vector transform and image coding', u'image coding by autoregressive synthesis', u'slant transform image coding', u'wavelets in image communication', u'color image compression by adaptive vector quantization', u'a tutorial on modern lossy wavelet image compression foundations of jpeg 2000', u'recursive block coding a new approach to transform coding', u'adaptive transform coding of color images at low rates', u'comparison of nth order dpcm encoder with linear transformations and block quantization techniques', u'image coding using vector quantization in the transform domain']]
current_queries (before calling search.perform) =  [['planning', 'and', 'problem', 'solving', 'from', 'neuropsychology', 'to', 'functional', 'neuroimaging
q_i =  [[323436 253156 188749 373703 102879 275199 256448  77522 117802     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2
      -2     -2     -2     -2     -2     -2     -2     -2     -2     -2     -2]]
q_m =  [[1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
  0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000]]
n_iter =  3
agent.observe(), terminal =False
reward = [0.0303]
